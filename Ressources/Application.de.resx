<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountName" xml:space="preserve">
    <value>Dein Guild Wars2 Account Name</value>
    <comment>Guild Wars 2 account name</comment>
  </data>
  <data name="AccountName_DiggitsMissing" xml:space="preserve">
    <value>Bitte geb auch die letzten 4 Ziffern deines GW2 Account Namens an.</value>
    <comment>Please also specifiy the last 4 digits of your GW2 account name!</comment>
  </data>
  <data name="AccountName_Incorrect" xml:space="preserve">
    <value>Dein Guild Wars 2 Account Name ist falsch. Bitte geb auch die letzten 4 Ziffern deines GW2 Account Namens an.</value>
    <comment>Your Guild Wars 2 account name is inccorect. Please make sure to also specify the last 4 Digits of your GW2 account name.</comment>
  </data>
  <data name="Embed_AccountName" xml:space="preserve">
    <value>Account Name</value>
    <comment>Account name</comment>
  </data>
  <data name="Embed_Found" xml:space="preserve">
    <value>Wie bist du auf unsere Community gestoßen?</value>
    <comment>How did you find the community?</comment>
  </data>
  <data name="Embed_Reason" xml:space="preserve">
    <value>Warum möchtest du bei uns Mitglied werden?</value>
    <comment>Why do you want to be a part of this community?</comment>
  </data>
  <data name="Embed_Title" xml:space="preserve">
    <value>Bewerbung!</value>
    <comment>Application!</comment>
  </data>
  <data name="Emote_CustomEmote" xml:space="preserve">
    <value>Custom Emotes sind nicht erlaubt!</value>
    <comment>Custom Emotes are not allowed!</comment>
  </data>
  <data name="Emote_GetEmote" xml:space="preserve">
    <value>Das derzeitige Bewerbungs Emoji ist: {0}</value>
    <comment>The current Application Emote is: {0}</comment>
  </data>
  <data name="Emote_MissingEmote" xml:space="preserve">
    <value>Es wurde kein Emoji angegeben!</value>
    <comment>No Emoji was specified!</comment>
  </data>
  <data name="Emote_Success" xml:space="preserve">
    <value>Bewerbungs Emoji erfolgreich gesetzt.</value>
    <comment>Successfully set the Application emoji.</comment>
  </data>
  <data name="Found" xml:space="preserve">
    <value>Wie bist du auf unsere Community gestoßen?</value>
    <comment>How did you find the community?</comment>
  </data>
  <data name="GetChannel_NotFound" xml:space="preserve">
    <value>Der Ziel-Channel konnte nicht gefunden werden.</value>
    <comment>Could not find the destination channel.</comment>
  </data>
  <data name="GetChannel_Success" xml:space="preserve">
    <value>Der derzeitige Ziel-Channel ist: {0}</value>
    <comment>The current destination channel is: {0}</comment>
  </data>
  <data name="Reason" xml:space="preserve">
    <value>Warum möchtest du bei uns Mitglied werden?</value>
    <comment>Why do you want to be a part of this community?</comment>
  </data>
  <data name="SetChannel_NoChannel" xml:space="preserve">
    <value>Bitte gebe einen Channel an in dem du diesen mit einem # referenzierst z.B. #inaktiv</value>
    <comment>Please provide a channel by referencing it with # and the channel name. e.g. #inactivity</comment>
  </data>
  <data name="SetChannel_Success" xml:space="preserve">
    <value>Ziel-Channel erfolgreich gesetzt!</value>
    <comment>Succesfully set the destination channel!</comment>
  </data>
  <data name="Start_MissingChannel" xml:space="preserve">
    <value>Es wurde vor dem aufrufen dieses Commands, kein Ziel Channel festgelegt. Bitte lege einen fest, mit dem Command "bewerbung channel [channel]"</value>
    <comment>No destination channel was set, prior to calling this command. Please set one using the command "application channel [channel]"</comment>
  </data>
  <data name="Start_Reaction" xml:space="preserve">
    <value>Bitte reagiere mit {0} um dich für die Community zu bewerben.</value>
    <comment>To apply for this community, please react with {0}</comment>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Vielen dank für deine Bewerbung!</value>
    <comment>Thank you for your application!</comment>
  </data>
  <data name="Timeout" xml:space="preserve">
    <value>Der Bot reagiert nicht mehr auf neue Nachrichten. Bitte reagiere wieder auf die Nachricht um die Bewerbung abzuschließen.</value>
    <comment>The bot will no longer respond to new messages. Please react to the message again to complete the Application!</comment>
  </data>
</root>